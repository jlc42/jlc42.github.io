{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CasesAndTestsByState","statesList","map","item","key","location","CaseAndTest","caseLong","href","target","rel","className","src","alt","DeathsByState","Death","PercentViralTestsByState","PercentViralTest","RTLiveCodeFigs","App","states","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bf7477d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// GOAL:\n// There are two different issues, a \"what do we do quickly for now\" and a \"what will this look like longer term\".\n\n// For now, I think we need a place-holder front page, with a link to the blog with my daily updates... and then some sort of auto-index (possibly with thumbnails) so people can get to the existing figures, which currently include testing/case data for each state, with the scale set so that if the testing data goes above the case data, you have a larger than 10% positivity rate. So... the goal would be to keep the cases line below the testing line in the graphs, when they are inverted, a state is in trouble.  So beyond just a directory listing, there should be SOME description of that that goes with the figures. I also have figures for a run of rt.live's algorithm, but on the whole us instead of a per/state level, which they don't do. So it would be nice to give a link to that as well.\n\n// But as time goes on I hope to add many different additional views for each state. I'm hoping to add things like % tests positive, and then the really interesting things... using a full Hierarchical Bayesian Model to estimate how many have actually been infected/are currently infected with good uncertainty bounds...Then I might possibly expand some of this to other countries. \n\n// So eventually, we would need something flexible that will give a reasonable ui so people can choose what figures / data they want to view, from a rather long list of options... while making sure it all makes sense. \n\n// Honestly, I have no idea what the best way is to arrange all that, nor have I kept up with HTML and the various scripting tools people use these days (thus my call for help). \n\nfunction App() {\n  let states = [\"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\", \"FL\", \"GA\", \"HI\", \"IA\", \"ID\", \"IL\", \"IN\", \"KS\", \"KY\", \"LA\", \"MA\", \"MD\", \"ME\", \"MI\", \"MN\", \"MO\", \"MS\", \"MT\", \"NC\", \"ND\", \"NE\", \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VA\", \"VT\", \"WA\", \"WI\", \"WV\", \"WY\"];\n\n  return (\n    <div className=\"main\">\n    \n      <h1>JLC42 - COVID19 Data</h1>\n      <a href=\"https://jlcarroll.blogspot.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Link to blog</a>\n      <h2>Cases and Tests</h2>\n      <div id=\"casesNTests\" className=\"casesNTests\">\n        <CasesAndTestsByState statesList={states} />\n      </div>\n      <h2>Deaths</h2>\n      <div id=\"deaths\" className=\"deaths\">\n        <DeathsByState statesList={states} />\n      </div>\n      <h2>Percent Viral Tests Positive</h2>\n      <div id=\"percentViralTests\" className=\"percentViralTests\">\n        <PercentViralTestsByState statesList={states} />\n      </div>\n      <h2>RT Live Code Figs</h2>\n      <div id=\"rtLiveCodeFigs\" className=\"rtLiveCodeFigs\">\n        <RTLiveCodeFigs />\n      </div>\n    </div>\n  );\n}\n\n// Component that holds the state case and tests charts\nconst CasesAndTestsByState = ({statesList}) => {\n  return (\n    <>\n      {statesList.map((item) => (<CaseAndTest key = {`${item}CaseNTest`} location = {item} />))}\n    </>\n  )\n}\n\n// Component that returns an individual case and test data for that state\nconst CaseAndTest = ({ location }) => {\n  let caseLong = `https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/casesNTests/${location}-DailyCasesAndTests.png`;\n  return (\n    <a href={caseLong} target=\"_blank\" rel=\"noopener noreferrer\">\n      <div className=\"case\">\n        <img className=\"caseImage\" src={caseLong} alt=\"\" />\n        {location}\n      </div>\n    </a>\n  )\n}\n\n// Component that holds the state death charts\nconst DeathsByState = ({ statesList }) => {\n  return (\n    <>\n      {statesList.map((item) => (<Death key = {`${item}Death`} location = {item} />))}\n    </>\n  )\n}\n\n// Component that returns an individual death chart for that state\nconst Death = ({ location }) => {\n  let caseLong = `https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/dailyDeaths/${location}-DailyDeaths.png`;\n  return (\n    <a href={caseLong} target=\"_blank\" rel=\"noopener noreferrer\">\n      <div className=\"case\">\n        <img className=\"caseImage\" src={caseLong} alt=\"\" />\n        {location}\n      </div>\n    </a>\n  )\n}\n\n// Component that holds the state percent viral tests positive charts\nconst PercentViralTestsByState = ({ statesList }) => {\n  return (\n    <>\n      {statesList.map((item) => (<PercentViralTest key = {`${item}PercentViralTest`} location = {item} />))}\n    </>\n  )\n}\n\n// Component that returns an individual death chart for that state\nconst PercentViralTest = ({ location }) => {\n  let caseLong = `https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/percentViralTestsPositive/${location}-PercentViralTestsPositive.png`;\n  return (\n    <a href={caseLong} target=\"_blank\" rel=\"noopener noreferrer\">\n      <div className=\"case\">\n        <img className=\"caseImage\" src={caseLong} alt=\"\" />\n        {location}\n      </div>\n    </a>\n  )\n}\n\n// Component that returns the two rt_live_code_figs\nconst RTLiveCodeFigs = () => {\n  return (\n    <>\n      <a href=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_cases.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <div className=\"case\">\n          <img className=\"caseImage\" src=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_cases.png\" alt=\"\" />\n          USA Cases\n        </div>\n      </a>\n      <a href=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_rt.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <div className=\"case\">\n          <img className=\"caseImage\" src=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_rt.png\" alt=\"\" />\n          USA RT\n        </div>\n      </a>\n    </>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}