{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Figures","React","useState","modal","setModal","USState","setUSState","window","addEventListener","DC","document","getElementsByClassName","item","console","log","insertAdjacentHTML","onClick","event","target","dataset","name","show","handleClose","location","content","id","className","RTLiveCodeFigs","category","setCategory","image","setImage","src","alt","type","url","Modal","currentUSStateName","currentCategoryName","showHideClassName","setContent","contentURL","setContentURL","currentUSState","Data","states","categoriesArr","val","categories","push","useEffect","a","text","config","method","axios","contentText","data","loadText","escFunction","keyCode","handleClick","removeEventListener","map","key","ModalForNation","App","href","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1fd36a9f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Data from './App.json';\nimport USAMap from 'react-usa-map';\n\n// GOAL:\n// There are two different issues, a \"what do we do quickly for now\" and a \"what will this look like longer term\".\n\n// For now, I think we need a place-holder front page, with a link to the blog with my daily updates... and then some sort of auto-index (possibly with thumbnails) so people can get to the existing figures, which currently include testing/case data for each state, with the scale set so that if the testing data goes above the case data, you have a larger than 10% positivity rate. So... the goal would be to keep the cases line below the testing line in the graphs, when they are inverted, a state is in trouble.  So beyond just a directory listing, there should be SOME description of that that goes with the figures. I also have figures for a run of rt.live's algorithm, but on the whole us instead of a per/state level, which they don't do. So it would be nice to give a link to that as well.\n\n// But as time goes on I hope to add many different additional views for each state. I'm hoping to add things like % tests positive, and then the really interesting things... using a full Hierarchical Bayesian Model to estimate how many have actually been infected/are currently infected with good uncertainty bounds...Then I might possibly expand some of this to other countries. \n\n// So eventually, we would need something flexible that will give a reasonable ui so people can choose what figures / data they want to view, from a rather long list of options... while making sure it all makes sense. \n\n// Honestly, I have no idea what the best way is to arrange all that, nor have I kept up with HTML and the various scripting tools people use these days (thus my call for help). \n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h1>JLC42 - COVID19 Watch</h1>\n      <a href=\"https://covid-19watch.blogspot.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Link to blog</a>\n      <Figures />\n    </div>\n  );\n}\n\n// Component that holds the figures\nconst Figures = () => {\n  // State hook that holds the modal boolean, whether or not it shows up\n  const [modal, setModal] = React.useState(false);\n  // State hook that holds the current US state being viewed\n  const [USState, setUSState] = React.useState('');\n  // Fixes the problem of DC not being labeled properly\n  window.addEventListener('load', () => {\n    let DC = document.getElementsByClassName(\"DC\").item(0);\n    console.log(DC);\n    DC.insertAdjacentHTML('beforeend', '<title>Washington DC</title>');\n  })\n\n  return (\n    <>\n      <h2>Select a state...</h2>\n      <USAMap \n        onClick={(event) => {\n          setModal(!modal); \n          setUSState(event.target.dataset.name);\n          }\n        } \n      />\n      <Modal \n        show={modal} \n        handleClose={() => {\n          setModal(!modal);\n          }\n        } \n        location = {USState} \n        content=\"Content\"\n      />\n      <h2>RT Live Code Figs</h2>\n      <div id=\"rtLiveCodeFigs\" className=\"rtLiveCodeFigs\">\n        <RTLiveCodeFigs />\n      </div> \n    </>\n  )\n}\n\n// Component that returns the two rt_live_code_figs\nconst RTLiveCodeFigs = () => {\n  // State hook that holds the modal boolean, whether or not it shows up\n  const [modal, setModal] = React.useState(false);\n  // State hook to hold which type of RT that is being passed\n  const [category, setCategory] = React.useState('');\n  // State hook to hold the URL of the image\n  const [image, setImage] = React.useState('');\n\n  return (\n    <>\n      <div className=\"case\" onClick={() => {setModal(!modal); setCategory('cases'); setImage('https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_cases.png');}}>\n        <img className=\"caseImage\" src=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_cases.png\" alt=\"\" />\n        USA Cases\n      </div>\n      <div className=\"case\" onClick={() => {setModal(!modal); setCategory('RT'); setImage('https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_rt.png');}}>\n        <img className=\"caseImage\" src=\"https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/USA_rt.png\" alt=\"\" />\n        USA RT\n      </div>\n      <ModalForNation \n        show={modal} \n        handleClose={() => {\n          setModal(!modal);\n          setCategory('');\n          setImage('');\n          }\n        }\n        type={category}\n        url={image}\n      />\n    </>\n  )\n}\n\n// Modal component that handles the popup when clicking the image\nconst Modal = ({ handleClose, show, location }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  // State hook that holds the current category being viewed\n  const [category, setCategory] = React.useState('');\n  // State hook that handles current image\n  const [image, setImage] = React.useState('');\n  // State hook that handles current text content\n  const [content, setContent] = React.useState('');\n  // State hook that handles current text content url\n  const [contentURL, setContentURL] = React.useState('');\n\n  // Define variables containing information used in modal window\n  let currentUSState = Data.states[location];\n  let currentUSStateName, currentCategoryName;\n  let categoriesArr = [];\n\n  for (let val in Data.categories) {\n    categoriesArr.push(val);\n  }\n\n  if (currentUSState) {\n    currentUSStateName = currentUSState.name;\n    currentCategoryName = Data.categories[category].name;\n  }\n\n  // useEffect hook that handles the change whenever state changes\n  React.useEffect(() => {\n    if (category === \"\") setCategory('estimatedInfections');\n    if (currentUSState) {\n      setImage(currentUSState[category].image);\n      // Handles loading the content text into the modal window\n      const loadText = async () => {\n        setContentURL(currentUSState[category].text);\n        try {\n          let config = {\n            method: 'get',\n            url: contentURL\n          }\n          if (contentURL !== '') {\n            let contentText = await axios(config);\n            setContent(contentText.data);\n          }\n        } catch (err) {\n          console.log(err);\n          setContent('');\n        }\n      }\n      loadText();\n    }\n  }, [category, currentUSState, content, contentURL]);\n\n  // If \"ESC\" is pressed, it exits the modal window\n  const escFunction = (event) => {\n    if (event.keyCode === 27) { \n      handleClose();\n    }\n  }\n\n  // If the mouse is clicked outside of the modal window while it is open, the modal will close\n  const handleClick = (event) => {\n    if (event.target.className === \"modal display-block\") {\n      handleClose();\n    }\n  }\n\n  // Side-effect that handles the ESC press or click out of modal window\n  React.useEffect(() => {\n    if (show) {\n      window.addEventListener('keydown', escFunction);\n      window.addEventListener('click', handleClick)\n      return (() => {\n        window.removeEventListener('keydown', escFunction);\n        window.removeEventListener('click', handleClick);\n      })\n    }\n  })\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <span className=\"close\" onClick={handleClose}>&times;</span>\n        <div className=\"modal-header\">  \n          <h1>{currentUSStateName} - {currentCategoryName}</h1>\n          {/* Insert buttons that allow you to change the category and view the related category's contents */}\n          {categoriesArr.map((item) => {\n            return <button key={item} onClick={(() => setCategory(item))}>{Data.categories[item].name}</button>\n          })}\n        </div>\n        <img className=\"modal-image\" src={image} alt={location} />\n        <div className=\"modal-content\">\n        {content || \"Lorem ipsum\"}\n        </div>\n        <div className=\"modal-footer\">\n          <button onClick={handleClose}>Close</button>\n        </div>\n      </section>\n    </div>\n  )\n};\n\nconst ModalForNation = ({ handleClose, show, type, url }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  // If \"ESC\" is pressed, it exits the modal window\n  const escFunction = (event) => {\n    if (event.keyCode === 27) { \n      handleClose();\n    }\n  }\n\n  // If the mouse is clicked outside of the modal window while it is open, the modal will close\n  const handleClick = (event) => {\n    if (event.target.className === \"modal display-block\") {\n      handleClose();\n    }\n  }\n\n  // Side-effect that handles the ESC press or click out of modal window\n  React.useEffect(() => {\n    if (show) {\n      window.addEventListener('keydown', escFunction);\n      window.addEventListener('click', handleClick)\n      return (() => {\n        window.removeEventListener('keydown', escFunction);\n        window.removeEventListener('click', handleClick);\n      })\n    }\n  })\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <span className=\"close\" onClick={handleClose}>&times;</span>\n        <div className=\"modal-header\">  \n          <h1>USA {type}</h1>\n        </div>\n        <img className=\"modal-image\" src={url} alt={type} />\n        <div className=\"modal-footer\">\n          <button onClick={handleClose}>Close</button>\n        </div>\n      </section>\n    </div>\n  )\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}