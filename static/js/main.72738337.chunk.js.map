{"version":3,"sources":["images/dkstoll.jpg","images/jlcarroll.jpg","components/ScrollToTop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","history","children","useEffect","unlisten","listen","window","scrollTo","AboutPage","id","className","href","rel","target","Navbar","to","Figures","React","useState","modal","setModal","USState","setUSState","show","handleClose","location","content","USAFigs","category","setCategory","image","setImage","onClick","type","url","tooltip","d3","append","attr","style","USAMap","projection","translate","width","height","scale","path","svgRef","useRef","csvJSON","csv","lines","split","result","headers","i","length","obj","innerObj","currentline","j","push","JSON","parse","stringify","statusIndicator","svg","current","a","usStatesAll","usStates","features","config","method","axios","data","rtData","currentState","Object","keys","currentRt","Mean","rtColor","existingUSStateInJSON","find","e","properties","abbr","assign","findIndex","x","fill","rt","console","log","selectAll","enter","d","name","on","html","dataset","state","parseFloat","toFixed","y","stateabbr","createMapWithColors","ref","Modal","currentUSStateName","currentCategoryName","showHideClassName","setContent","contentURL","setContentURL","currentUSState","Data","states","categoriesArr","val","categories","text","contentText","loadText","escFunction","event","keyCode","handleClick","addEventListener","removeEventListener","map","item","key","src","alt","ModalForNation","USAData","News","newsfeed","setNewsfeed","res","items","retrieveBlog","dt","DateTime","fromSQL","pubDate","sanitizedContent","sanitizeHtml","allowedTags","link","title","toLocaleString","DATETIME_FULL","dangerouslySetInnerHTML","__html","Credits","jamesPic","objectPosition","darrenPic","App","exact","component","Boolean","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72738337.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dkstoll.9bb3fadc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jlcarroll.ddd43882.jpg\";","// https://stackoverflow.com/questions/36904185/react-router-scroll-to-top-on-every-transition\r\n\r\n// ScrollToTop component that scrolls the app to the top of the page upon loading a new component\r\nimport React, { useEffect, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history, children }) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  });\r\n\r\n  return <Fragment>{children}</Fragment>;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport './App.scss';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport sanitizeHtml from 'sanitize-html';\nimport { DateTime } from 'luxon';\nimport axios from 'axios';\nimport Data from './App.json';\nimport * as d3 from 'd3';\n\nimport usStates from './usStates.json';\n\nimport ScrollToTop from './components/ScrollToTop.js';\n\nimport darrenPic from './images/dkstoll.jpg';\nimport jamesPic from './images/jlcarroll.jpg';\n\n// GOAL:\n// There are two different issues, a \"what do we do quickly for now\" and a \"what will this look like longer term\".\n\n// For now, I think we need a place-holder front page, with a link to the blog with my daily updates... and then some sort of auto-index (possibly with thumbnails) so people can get to the existing figures, which currently include testing/case data for each state, with the scale set so that if the testing data goes above the case data, you have a larger than 10% positivity rate. So... the goal would be to keep the cases line below the testing line in the graphs, when they are inverted, a state is in trouble.  So beyond just a directory listing, there should be SOME description of that that goes with the figures. I also have figures for a run of rt.live's algorithm, but on the whole us instead of a per/state level, which they don't do. So it would be nice to give a link to that as well.\n\n// But as time goes on I hope to add many different additional views for each state. I'm hoping to add things like % tests positive, and then the really interesting things... using a full Hierarchical Bayesian Model to estimate how many have actually been infected/are currently infected with good uncertainty bounds...Then I might possibly expand some of this to other countries. \n\n// So eventually, we would need something flexible that will give a reasonable ui so people can choose what figures / data they want to view, from a rather long list of options... while making sure it all makes sense. \n\n// Honestly, I have no idea what the best way is to arrange all that, nor have I kept up with HTML and the various scripting tools people use these days (thus my call for help). \n\nconst App = () => {\n  return (\n    <Switch>\n      <ScrollToTop>\n        <Route exact path=\"/\" component={Figures} />\n        <Route path=\"/news\" component={News} />\n        <Route path=\"/about\" component={AboutPage} />\n        <Route path=\"/credits\" component={Credits} />\n      </ScrollToTop>\n    </Switch>\n  );\n}\n\n// Component that contains info that the viewer will first see\nconst AboutPage = () => {\n  // Once we have a host with its own backend, we can use api keys to retrieve blog information\n\n  return (\n    <>\n      <Navbar />\n      <div id=\"about\">\n        <a className=\"button\" href=\"https://covid-19watch.blogspot.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Link to blog</a>\n        <p>This site contains the up-to-date data about COVID-19 in the US.</p>\n      </div>\n    </>\n  )\n}\n\n// Component that contains the navbar\nconst Navbar = () => {\n  return (\n    <header>\n      <nav id=\"navbar\">\n        <ul>\n          <Link className=\"nav-link\" to=\"/\"><li>Map & Figures</li></Link>\n          <Link className=\"nav-link\" to=\"/news\"><li>News</li></Link>\n          <Link className=\"nav-link\" to=\"/about\"><li>About</li></Link>\n          <Link className=\"nav-link\" to=\"/credits\"><li>Credits</li></Link>\n        </ul>\n      </nav>\n    </header>\n  )\n}\n\n// Component that holds the figures\nconst Figures = () => {\n  // State hook that holds the modal boolean, whether or not it shows up\n  const [modal, setModal] = React.useState(false);\n  // State hook that holds the current US state being viewed\n  const [USState, setUSState] = React.useState('');\n\n  return (\n    <>\n      <Navbar />\n      <div id=\"figures\">\n        <h1>COVID-19 Watch</h1>\n        <div id=\"USAFigs\" className=\"USAFigs\">\n          <USAFigs />\n        </div>\n        <h2>Select a state...</h2>\n        \n        {/* https://websitebeaver.com/how-to-make-an-interactive-and-responsive-svg-map-of-us-states-capitals */}\n        <USAMap modal={modal} setModal={setModal} USState={USState} setUSState={setUSState} />\n        <Modal \n          show={modal} \n          handleClose={() => {\n            setModal(!modal);\n            }\n          }\n          location = {USState} \n          content=\"Content\"\n        />\n        \n      </div>\n    </>\n  )\n}\n\n// Component that returns the USA figures\nconst USAFigs = () => {\n  // State hook that holds the modal boolean, whether or not it shows up\n  const [modal, setModal] = React.useState(false);\n  // State hook to hold which type of RT that is being passed\n  const [category, setCategory] = React.useState('');\n  // State hook to hold the URL of the image\n  const [image, setImage] = React.useState('');\n\n  return (\n    <>\n      <button className=\"chartButton\" onClick={() => {setModal(!modal)}}>\n        Overall USA Statistics\n      </button>\n      <ModalForNation\n        show={modal} \n        handleClose={() => {\n          setModal(!modal);\n          setCategory('');\n          setImage('');\n          }\n        }\n        location=\"USA\"\n        type={category}\n        url={image}\n      />\n    </>\n  )\n}\n\n// Tooltip declared outside of component to avoid duplication\nvar tooltip = d3.select(\"body\")\n .append(\"div\")\n .attr(\"class\", \"tooltip\")               \n .style(\"visibility\", \"hidden\");\n\nconst USAMap = ({ modal, setModal, USState, setUSState }) => {\n  //Width and height of map\n  var width = 960;\n  var height = 500;\n\n  // D3 Projection\n  var projection = d3.geoAlbersUsa()\n            .translate([width/2, height/2])    // translate to center of screen\n            .scale([1000]);          // scale things down so see entire US\n          \n  // Define path generator\n  var path = d3.geoPath()               // path generator that will convert GeoJSON to SVG paths\n          .projection(projection);  // tell path generator to use albersUsa projection\n\n\n  const svgRef = React.useRef();\n  \n  // Function to convert csv to JSON, specific for this project - http://techslides.com/convert-csv-to-json-in-javascript\n  const csvJSON = (csv) => {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    // NOTE: If your columns contain commas in their values, you'll need\n    // to deal with those before doing the next step \n    // (you might convert them to &&& or something, then covert them back later)\n    // jsfiddle showing the issue https://jsfiddle.net/\n    var headers=lines[0].split(\",\");\n\n    for(var i=1;i<lines.length;i++){\n\n      var obj = {}, innerObj = {};\n      var currentline=lines[i].split(\",\");\n      for(var j=1;j<headers.length;j++){\n        innerObj[headers[j]] = currentline[j];\n      }\n      obj[currentline[0]] = innerObj;\n      result.push(obj);\n    }\n\n    //return result; //JavaScript object\n    return JSON.parse(JSON.stringify(result)); //JSON\n\n  }\n\n  // Get the current colors for each state to use for fill\n  \n  let statusIndicator = [\"#cc0000\",\"#cccc00\",\"#00cc00\", \"#66ff00\", \"#ffa500\"];\n  \n  // Build the map using d3 and the fill colors from the rt data\n  React.useEffect(() => {\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const createMapWithColors = async () => {\n      let usStatesAll = usStates.features;\n\n      try {\n        let config = {\n          method: 'get',\n          url: 'https://raw.githubusercontent.com/jlc42/jlc42.github.io/master/figs/rt_live_code_figs/masterRt.csv'\n        }\n        let rtData = csvJSON((await axios(config)).data);\n        for (let i = 0; i < rtData.length; i++) {\n          let currentState = Object.keys(rtData[i])[0];\n          \n          let currentRt = rtData[i][currentState].Mean;\n          let rtColor;\n          if (currentRt > 1.1) rtColor = statusIndicator[0];\n          else if (currentRt > 1.02) rtColor = statusIndicator[4];\n          else if (currentRt < 0.95) rtColor = statusIndicator[3];\n          else if (currentRt < 0.98) rtColor = statusIndicator[2];\n          else rtColor = statusIndicator[1];\n\n          let existingUSStateInJSON = usStatesAll.find(e => e.properties.abbr === currentState);\n\n          if (existingUSStateInJSON) {\n            Object.assign(usStatesAll[usStatesAll.findIndex(x => x.id === existingUSStateInJSON.id)].properties, {fill: rtColor}, {rt: currentRt});\n          }\n  \n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      // 50 States path creation\n      svg.selectAll(\"path\")\n      .data(usStatesAll)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"data-stateabbr\", (d) => d.properties.abbr)\n      .attr(\"data-state\", (d) => d.properties.name)\n      .attr(\"data-rt\", d => d.properties.rt)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", \"1\")\n      .style(\"fill\", (d) => d.properties.fill)\n\n      .on(\"mousemove\", (d) => {\n        tooltip.html(\"<p>\" + d.target.dataset.state + \"<br />rt: \" + parseFloat(d.target.dataset.rt).toFixed(4) + \"</p>\")\n          .style(\"left\", (d.x + 18) + \"px\")\n          .style(\"top\", (d.y - 28) + \"px\")\n          .style(\"visibility\", \"visible\")\n      })\n      .on(\"mouseout\", (d) => {\n        tooltip\n          .style(\"visibility\", \"hidden\")\n      })\n      .on(\"click\", (d) => {\n        setModal(!modal);\n        setUSState(d.target.dataset.stateabbr);\n      });\n    \n    // Insert DC\n    svg.selectAll(\"svg\")\n      .data([usStatesAll.find(e => e.id === \"11\")])\n      .enter()\n      .append(\"circle\")\n      .attr(\"data-stateabbr\", (d) => d.properties.abbr)\n      .attr(\"data-state\", (d) => d.properties.name)\n      .attr(\"data-rt\", d => d.properties.rt)\n      .attr(\"cx\", 740)\n      .attr(\"cy\", 220)\n      .attr(\"r\", 5)\n      .attr(\"fill\", (d) => d.properties.fill)\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", \"2\")\n\n      .on(\"mousemove\", (d) => {\n        tooltip.html(\"<p>\" + d.target.dataset.state + \"<br />rt: \" + parseFloat(d.target.dataset.rt).toFixed(4) + \"</p>\")\n          .style(\"left\", (d.x + 18) + \"px\")\n          .style(\"top\", (d.y - 28) + \"px\")\n          .style(\"opacity\", 0.9)\n      })\n      .on(\"mouseout\", (d) => {\n        tooltip\n          .style(\"opacity\", 0)\n      })\n      .on(\"click\", (d) => {\n        setModal(!modal);\n        setUSState(d.target.dataset.stateabbr);\n      });\n    }\n    createMapWithColors();\n  });\n\n  return (\n    <>\n      <svg ref={svgRef}></svg>\n    </>\n  )\n}\n\n// Modal component that handles the popup when clicking the image\nconst Modal = ({ handleClose, show, location }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  // State hook that holds the current category being viewed\n  const [category, setCategory] = React.useState('');\n  // State hook that handles current image\n  const [image, setImage] = React.useState('');\n  // State hook that handles current text content\n  const [content, setContent] = React.useState('');\n  // State hook that handles current text content url\n  const [contentURL, setContentURL] = React.useState('');\n\n  // Define variables containing information used in modal window\n  let currentUSState = Data.states[location];\n  let currentUSStateName, currentCategoryName;\n  let categoriesArr = [];\n\n  for (let val in Data.categories) {\n    categoriesArr.push(val);\n  }\n\n  if (currentUSState) {\n    currentUSStateName = currentUSState.name;\n    currentCategoryName = Data.categories[category].name;\n  }\n\n  // useEffect hook that handles the change whenever state changes\n  React.useEffect(() => {\n    if (category === \"\") setCategory('percentInfected');\n    if (currentUSState) {\n      setImage(currentUSState[category].image);\n      // Handles loading the content text into the modal window\n      const loadText = async () => {\n        setContentURL(currentUSState[category].text);\n        try {\n          let config = {\n            method: 'get',\n            url: contentURL\n          }\n          if (contentURL !== '') {\n            let contentText = await axios(config);\n            setContent(contentText.data);\n          }\n        } catch (err) {\n          console.log(err);\n          setContent('');\n        }\n      }\n      loadText();\n    }\n  }, [category, currentUSState, content, contentURL]);\n\n  // If \"ESC\" is pressed, it exits the modal window\n  const escFunction = (event) => {\n    if (event.keyCode === 27) { \n      handleClose();\n    }\n  }\n\n  // If the mouse is clicked outside of the modal window while it is open, the modal will close\n  const handleClick = (event) => {\n    if (event.target.className === \"modal display-block\") {\n      handleClose();\n    }\n  }\n\n  // Side-effect that handles the ESC press or click out of modal window\n  React.useEffect(() => {\n    if (show) {\n      window.addEventListener('keydown', escFunction);\n      window.addEventListener('click', handleClick)\n      return (() => {\n        window.removeEventListener('keydown', escFunction);\n        window.removeEventListener('click', handleClick);\n      })\n    }\n  })\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <span className=\"close\" onClick={handleClose}>&times;</span>\n        <div className=\"modal-header\">  \n          <h1>{currentUSStateName} - {currentCategoryName}</h1>\n          {/* Insert buttons that allow you to change the category and view the related category's contents */}\n          {categoriesArr.map((item) => {\n            return <button key={item} onClick={(() => setCategory(item))}>{Data.categories[item].name}</button>\n          })}\n        </div>\n        <img className=\"modal-image\" src={image} alt={location} />\n        <div className=\"modal-content\">\n        {content || \"No explanation yet...\"}\n        </div>\n        <div className=\"modal-footer\">\n          <button onClick={handleClose}>Close</button>\n        </div>\n      </section>\n    </div>\n  )\n};\n\nconst ModalForNation = ({ handleClose, show, type, url }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  // State hook that holds the current category being viewed\n  const [category, setCategory] = React.useState('percentInfected');\n  // State hook that handles current image\n  const [image, setImage] = React.useState('');\n  // State hook that handles current text content\n  const [content, setContent] = React.useState('');\n  // State hook that handles current text content url\n  const [contentURL, setContentURL] = React.useState('');\n  \n  let USAData = Data.states[\"USA\"];\n\n  let categoriesArr = [];\n\n  for (let val in Data.categories) {\n    categoriesArr.push(val);\n  }\n\n  let currentCategoryName = Data.categories[category].name;\n\n  // If \"ESC\" is pressed, it exits the modal window\n  const escFunction = (event) => {\n    if (event.keyCode === 27) { \n      handleClose();\n    }\n  }\n\n  // If the mouse is clicked outside of the modal window while it is open, the modal will close\n  const handleClick = (event) => {\n    if (event.target.className === \"modal display-block\") {\n      handleClose();\n    }\n  }\n\n  // Side-effect that handles the ESC press or click out of modal window\n  React.useEffect(() => {\n    if (show) {\n      window.addEventListener('keydown', escFunction);\n      window.addEventListener('click', handleClick)\n      return (() => {\n        window.removeEventListener('keydown', escFunction);\n        window.removeEventListener('click', handleClick);\n      })\n    }\n  })\n\n    // useEffect hook that handles the change whenever state changes\n    React.useEffect(() => {\n      if (USAData) {\n        setImage(USAData[category].image);\n        // Handles loading the content text into the modal window\n        const loadText = async () => {\n          setContentURL(USAData[category].text);\n          try {\n            let config = {\n              method: 'get',\n              url: contentURL\n            }\n            if (contentURL !== '') {\n              let contentText = await axios(config);\n              setContent(contentText.data);\n            }\n          } catch (err) {\n            console.log(err);\n            setContent('');\n          }\n        }\n        loadText();\n      }\n    }, [category, USAData, content, contentURL]);\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <span className=\"close\" onClick={handleClose}>&times;</span>\n        <div className=\"modal-header\">  \n          <h1>USA - {currentCategoryName}</h1>\n          {/* Insert buttons that allow you to change the category and view the related category's contents */}\n          {categoriesArr.map((item) => {\n            return <button key={item} onClick={(() => setCategory(item))}>{Data.categories[item].name}</button>\n          })}\n        </div>\n        <img className=\"modal-image\" src={image} alt=\"USA\" />\n        <div className=\"modal-content\">\n        {content || \"No explanation yet...\"}\n        </div>\n        <div className=\"modal-footer\">\n          <button onClick={handleClose}>Close</button>\n        </div>\n      </section>\n    </div>\n  )\n};\n\nconst News = () => {\n  const [newsfeed, setNewsfeed] = React.useState([]);\n  React.useEffect(() => {\n    const retrieveBlog = async () => {\n      try {\n        let config = {\n          method: 'get',\n          url: \"https://api.rss2json.com/v1/api.json?rss_url=https://covid-19watch.blogspot.com/feeds/posts/default?alt=rss\"\n        }\n        let res = await axios(config);\n        setNewsfeed([\n          res.data.items[0],\n          res.data.items[1],\n          res.data.items[2]\n        ])\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    retrieveBlog();\n  },[])\n\n  return (\n    <>\n      <Navbar />\n      <div id=\"news\">\n        {newsfeed.map(item => {\n          let dt = DateTime.fromSQL(item.pubDate);\n          \n          let sanitizedContent = sanitizeHtml(item.content, \n            {\n              allowedTags: ['p','img','span','br','div','a','h2']\n            });\n          \n          return(\n            <div key={item.link} className=\"newsItemContainer\">\n              <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\"><h1>{item.title}</h1></a>\n              <h5>{dt.toLocaleString(DateTime.DATETIME_FULL)}</h5>\n              <div dangerouslySetInnerHTML={{__html: sanitizedContent}}></div>\n            </div>\n          )\n        })}\n      </div>\n    </>\n  )\n}\n\n// Component that has information on all the people who contributed to this project\nconst Credits = () => {\n  return (\n    <>\n      <Navbar />\n        \n      <div id=\"credits\">\n        <h2>Credits</h2>\n        <div className=\"creditContainer\">\n          <div className=\"creditImageContainer\"><img src={jamesPic} alt=\"James\" style={{objectPosition:\"50% 35%\"}} /></div>\n          <div className=\"creditInfo\">\n            <h3>James L Carroll</h3>\n            <h4>\"The One in Charge\"/Data Specialist</h4>\n            <p>James Carroll has a PhD in statistical machine learning, with a minor in Ancient Near Eastern history from Brigham Young University, and is currently a scientist at Los Alamos National Laboratory working in complex data analysis and uncertainty quantification.</p>\n          </div>\n        </div>\n        <div className=\"creditContainer\">\n        <div className=\"creditImageContainer\"><img src={darrenPic} alt=\"Darren\" /></div>\n          <div className=\"creditInfo\">\n            <h3>Darren Stoll</h3>\n            <h4>Front-end Site Manager</h4>\n            <p>Darren is the one that makes the info show up on a nice, orderly website. He is a front-end software engineer.</p>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}